(define (my-merge-sort lst)
  (define (split unsplt)
    (define (split-half unsplt lst1 lst2)
      (cond
       ((null? unsplt) (list lst1 lst2))
       ((null? (cdr unsplt)) (list (append unsplt lst1) lst2))
       (else (split-half (cddr unsplt) (cons (car unsplt) lst1) (cons (cadr unsplt) lst2)))))
    (cond
     ((null? (cdr unsplt)) unsplt)
     (else (map split (split-half unsplt '() '())))))
  (define (merge lst)
    (define (merge-tail lst1 lst2 merged)
      (cond
       ((and (null? lst1) (null? lst2)) merged)
       ((null? lst1) (merge-tail '() (cdr lst2) (cons (car lst2) merged)))
       ((null? lst2) (merge-tail (cdr lst1) '() (cons (car lst1) merged)))
       ((list? (car lst1)) (merge-tail (merge lst1) lst2 merged))
       ((list? (car lst2)) (merge-tail lst1 (merge lst2) merged))
       ((< (car lst1) (car lst2)) (merge-tail (cdr lst1) lst2 (cons (car lst1) merged)))
       (else (merge-tail lst1 (cdr lst2) (cons (car lst2) merged)))))
    (reverse (merge-tail (car lst) (cadr lst) '())))
  (merge (split lst)))

(display "(my-merge-sort '(3 7 8 5 2 1 9 5 4))\n")
(display (my-merge-sort '(3 7 8 5 2 1 9 5 4))) (newline) (newline)
